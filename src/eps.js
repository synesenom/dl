/**
 * An EPS generator class.
 */
function EPS(boundingBox) {
    // A list of keywords
    var kw = {
        gs: " gsave ",
        gr: " grestore ",
        np: " newpath ",
        lw: " setlinewidth ",
        mt: " moveto ",
        lt: " lineto ",
        c: " setrgbcolor ",
        f: " fill ",
        s: " stroke ",
        a: " arc "
    };

    /**
     * An object containing all element of the document:
     * - header
     * - bounding box
     * - styles
     * - drawn elements
     * - eps.footer
     */
    this._doc = {
        by: "",
        bbox: "%%BoundingBox: 0 0 " + boundingBox.width + " " + boundingBox.height + "\n",
        style: {},
        elems: {
            lines: [],
            circles: []
        },
        footer: "\n%%EOF"
    };

    /**
     * Content of the 'Generated by' comment.
     *
     * @param {string} generatedBy Generated by content.
     * @returns {EPS} This EPS object.
     */
    this.by = function(generatedBy) {
        this._doc.by = "\n%Generated by " + generatedBy + "\n";
        return this;
    };

    /*this.style = function(name, values) {
        // Name
        this._doc.style[name] = "/" + name;

        // Single value
        if (values.length == 1) {
            this._doc.style[name] += " " + values[0] + " ";
        } else {
            // Multiple values
            this._doc.style[name] += " [";
            for (var i in values) {
                this._doc.style[name] += " " + values[i];
            }
            this._doc.style[name] += " ]";
        }
        this._doc.style[name] += " def\n";
        return this;
    };*/

    /**
     * Draws a line.
     *
     * @param {object} src Source position, must have x and y keys.
     * @param {object} dst Destination position, must have x and y keys.
     * @param {object} color Color, must have r, g and b keys, all values are between 0 and 1.
     * @param {number} width Width of the line.
     * @returns {EPS} This EPS object.
     */
    this.line = function(src, dst, color, width) {
        this._doc.elems.lines.push({
            src: src,
            dst: dst,
            color: color,
            width: width
        });
        return this;
    };

    /**
     * Draws a circle.
     *
     * @param {object} pos Position, must have x and y keys.
     * @param {number} radius Radius.
     * @param {object} color Color, must have r, g and b keys, all values are between 0 and 1.
     * @param {object} stroke Color, must have r, g and b keys, all values are between 0 and 1.
     * @param {number} strokeWidth Width of the stroke around the circle.
     * @returns {EPS} This EPS object.
     */
    this.circle = function(pos, radius, color, stroke, strokeWidth) {
        this._doc.elems.circles.push({
            pos: pos,
            radius: radius,
            color: color,
            stroke: stroke,
            strokeWidth: strokeWidth
        });
        return this;
    };

    /**
     * Builds the EPS document content.
     *
     * @returns {string} Content of the EPS document.
     */
    this.make = function() {
        // Header
        var doc = "%!PS-Adobe-2.0 EPSF-2.0" + this._doc.by + "\n";
        doc += this._doc.bbox + "\n";

        // Styles
        /*_doc += "%Style\n%\n";
        for (var s in this._doc.style) {
            if (this._doc.style.hasOwnProperty(s)) {
                _doc += this._doc.style[s];
            }
        }
        _doc += "\n";*/

        // Elements
        this._doc.elems.lines.forEach(function(l) {
            doc += kw.gs + kw.np;
            doc += l.color.r + " " + l.color.g + " " + + l.color.b + kw.c;
            doc += l.width + kw.lw;
            doc += l.src.x + " " + l.src.y + kw.mt + l.dst.x + " " + l.dst.y + kw.lt + kw.s;
            doc += kw.gr + "\n";
        });
        this._doc.elems.circles.forEach(function(c) {
            doc += kw.gs + kw.np;
            doc += c.color.r + " " + c.color.g + " " + + c.color.b + kw.c;
            doc += c.pos.x + " " + c.pos.y + " " + c.radius + " 0 360" + kw.a;
            doc += kw.gs + kw.f + kw.gr;
            doc += c.stroke.r + " " + c.stroke.g + " " + + c.stroke.b + kw.c;
            doc += c.strokeWidth + kw.lw + kw.s;
            doc += kw.gr + "\n";
        });

        // Footer
        doc += this._doc.footer;
        return doc.replace(/  +/g, " ").replace(/\n /g, "\n");
    };
}